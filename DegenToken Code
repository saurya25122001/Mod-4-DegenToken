// SPDX-License-Identifier: MIT
//Assessment Requirements
// 1. Minting new tokens
// 2. Burning tokens
// 3. Redeeming tokens
// 4. Checking token balance
// 5. Transferring tokens 

pragma solidity 0.8.18;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract DegenToken is ERC20, ERC20Burnable, Ownable {
    constructor() ERC20("DegenToken", "DGN") {}

    function mint(address recipient, uint256 amount) external onlyOwner {
        _mint(recipient, amount);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        require(amount > 0, "Amount must be greater than zero.");
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function redeemPrize(uint256 prizeCost, bool selectedPrizeA) external {
        require(prizeCost > 0, "Prize cost must be greater than zero.");
        require(balanceOf(_msgSender()) >= prizeCost, "Insufficient balance.");
        require(selectedPrizeA || !selectedPrizeA, "Invalid prize selection.");

        _burn(_msgSender(), prizeCost);

        if (selectedPrizeA) {
            // Perform prize redemption logic for Prize A
            // For example, update in-game store or perform other actions
            emit PrizeRedeemed(_msgSender(), prizeCost, "Prize A");
        } else {
            // Perform prize redemption logic for Prize B
            
            emit PrizeRedeemed(_msgSender(), prizeCost, "Prize B");
        }
    }

    function checkBalance(address account) external view returns (uint256) {
        return balanceOf(account);
    }

    // Custom events to emit during the prize redemption process
    event PrizeRedeemed(address indexed account, uint256 prizeCost, string prizeName);
}
